{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Prop","className","onSubmit","submitCall","class","type","name","placeholder","Result","Props","resultdata","hum","sys","country","main","humidity","temp","weather","description","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","preventDefault","city","target","elements","value","url","fetch","then","data","status","alert","catch","err","console","log","fetchCall","json","weatherInfo","setState","Components_Title","Form","Components_Result","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fca63208.chunk.js","sourcesContent":["import React from 'react'\nfunction Title(){\n    return(\n        <div>\n        <h1>Weather Catcher</h1>\n        <p>Find Out The Weather Conditions And More ..</p>\n        </div>\n    )\n}\nexport default Title;\n","import React from 'react'\n\nfunction Title(Prop) {\n    return (\n        <div className={\"formWeather\"}>\n            <form onSubmit={Prop.submitCall}>\n                <div class=\"d-flex  justify-content-center\">\n                    <input type=\"text\" name=\"city\" placeholder=\"city\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"country\"/>\n\n                    <button>Get Weather</button>\n                </div>\n            </form>\n\n        </div>\n    )\n}\n\nexport default Title;\n","import React from 'react';\n\nfunction Result(Props) {\n    if ((Props.resultdata)) {\n        var hum = <div className=\"container weatherResult\"><div className=\"\"><div className=\"row\"><div className=\"col-sm-12\">\n            <h1>Weather Report of {Props.resultdata.name} ,{Props.resultdata.sys.country}</h1>\n            <div className=\"d-flex\">\n                <p>Humidity</p>\n                <p>{(Props.resultdata.main.humidity)}</p>\n            </div>\n            <div className=\"d-flex\">\n                <p>Temparature</p><p>{(Props.resultdata.main.temp)}</p>\n            </div>\n            <div className=\"d-flex\">\n                <p>Weather</p><p>{(Props.resultdata.weather[0].description)}</p>\n            </div>\n        </div></div></div></div>\n    }\n    return (\n        <div>{hum}</div>\n\n\n    );\n}\n\n\nexport default Result;\n","import React from 'react';\nimport './App.css';\nimport Title from './Components/Title.js'\nimport Form from './Components/Form.js'\nimport Result from './Components/Result.js'\nvar API_KEY = \"95cac868ce19e2f03ceebac8bc0d8125\";\n\nvar city, country;\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            humidity: {}\n        }\n\n        this.submitCall = this.submitCall.bind(this)\n    }\n\n    async submitCall(event) {\n        event.preventDefault();\n        const city = event.target.elements.city.value;\n        const country = event.target.elements.country.value;\n        var url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`;\n\n        var fetchCall = await fetch(url).then((data)=>{\n            if (data.status >= 200 && data.status < 300)   return data; else alert(\"enter correct info\")\n\n        }).catch(err => console.log(err));\n\n        var weatherInfo = fetchCall ? await fetchCall.json() : null\n\n\n        this.setState({\n            weatherInfo: weatherInfo\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"weather\">\n                <div className=\"container\">\n                    <div className=\"textbox row py-3 bg d-flex align-items-center justify-content-center  text-light\">\n                        <div className=\"col-sm-6 \">\n                            <Title/>\n                        </div>\n                        <div className=\"col-sm-6\">\n\n                            <Form submitCall={this.submitCall} city={this.state.city}\n                                  country={this.state.country}/>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n                <Result resultdata={this.state.weatherInfo}/>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}